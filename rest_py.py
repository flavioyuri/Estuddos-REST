# -*- coding: utf-8 -*-
"""Rest.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dD6XHKb49KcXIxM_hqLD5J2mvtwAbmZ8
"""

from flask import Flask, jsonify, request

app = Flask(__name__)

# Lista de pessoas (inicialmente vazia)
pessoas = []

# Rota para listar todas as pessoas
@app.route('/pessoas', methods=['GET'])
def get_pessoas():
    return jsonify(pessoas)

# Rota para criar uma nova pessoa
@app.route('/pessoas', methods=['POST'])
def criar_pessoa():
    data = request.get_json()
    pessoa = {
        'id': len(pessoas) + 1,
        'nome': data['nome'],
        'idade': data['idade'],
        'enderecos': data.get('enderecos', []),
        'endereco_principal': data.get('endereco_principal', None)

    }
    pessoas.append(pessoa)
    return jsonify(pessoa), 201

# Rota para obter detalhes de uma pessoa específica
@app.route('/pessoas/<int:pessoa_id>', methods=['GET'])
def get_pessoa(pessoa_id):
    pessoa = [pessoa for pessoa in pessoas if pessoa['id'] == pessoa_id]
    if len(pessoa) == 0:
        return jsonify({'mensagem': 'Pessoa não encontrada'}), 404
    return jsonify(pessoa[0])

# Rota para atualizar os dados de uma pessoa
@app.route('/pessoas/<int:pessoa_id>', methods=['PUT'])
def editar_pessoa(pessoa_id):
    pessoa = [pessoa for pessoa in pessoas if pessoa['id'] == pessoa_id]
    if len(pessoa) == 0:
        return jsonify({'mensagem': 'Pessoa não encontrada'}), 404
    data = request.get_json()
    pessoa[0]['nome'] = data['nome']
    pessoa[0]['idade'] = data['idade']
    pessoa[0]['enderecos'] = data['enderecos']
    pessoa[0]['endereco_principal'] = data['endereco_principal']
    return jsonify(pessoa[0])

# Rota para obter os endereços de uma pessoa
@app.route('/pessoas/<int:pessoa_id>/enderecos', methods=['GET'])
def obter_enderecos_pessoa(pessoa_id):
    pessoa = next((p for p in pessoas if p['id'] == pessoa_id), None)
    if pessoa is None:
        return jsonify({'mensagem': 'Pessoa não encontrada'}), 404
    return jsonify(pessoa['enderecos'])

# Rota para excluir uma pessoa
@app.route('/pessoas/<int:pessoa_id>', methods=['DELETE'])
def deletar_pessoa(pessoa_id):
    pessoa = [pessoa for pessoa in pessoas if pessoa['id'] == pessoa_id]
    if len(pessoa) == 0:
        return jsonify({'mensagem': 'Pessoa não encontrada'}), 404
    pessoas.remove(pessoa[0])
    return jsonify({'mensagem': 'Pessoa removida com sucesso'})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)

import requests

# URL base do servidor Flask
base_url = 'http://127.28.0.12:5000'

# Função para criar uma nova pessoa
def criar_pessoa(nome, idade, enderecos=[], endereco_principal=None):
    url = f'{base_url}/pessoas'
    data = {
        'nome': nome,
        'idade': idade,
        'enderecos': enderecos,
        'endereco_principal': endereco_principal
    }
    response = requests.post(url, json=data)
    return response.json()

# Função para obter os endereços de uma pessoa
def obter_enderecos_pessoa(pessoa_id):
    url = f'{base_url}/pessoas/{pessoa_id}/enderecos'
    response = requests.get(url)
    return response.json()

# Criar uma nova pessoa
nova_pessoa = criar_pessoa('João', 25, [{'rua': 'Rua 123', 'bairro': 'Bairro ABC'}], 0)
print("Nova pessoa criada:", nova_pessoa)

# Obter os endereços da pessoa recém-criada
id_pessoa = nova_pessoa['id']
enderecos_pessoa = obter_enderecos_pessoa(id_pessoa)
print("Endereços da pessoa:", enderecos_pessoa)